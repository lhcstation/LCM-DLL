/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace exlcm
{
    public sealed class example_t : LCM.LCM.LCMEncodable
    {
        public sbyte velID;
        public double time;
        public double velFrontcoorX;
        public double velFrontcoorY;
        public double velEndcoorX;
        public double velEndcoorY;
 
        public example_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x2db6ca54e8568da3L;
 
        static example_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("exlcm.example_t"))
                return 0L;
 
            classes.Add("exlcm.example_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.velID); 
 
            outs.Write(this.time); 
 
            outs.Write(this.velFrontcoorX); 
 
            outs.Write(this.velFrontcoorY); 
 
            outs.Write(this.velEndcoorX); 
 
            outs.Write(this.velEndcoorY); 
 
        }
 
        public example_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public example_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static exlcm.example_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            exlcm.example_t o = new exlcm.example_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.velID = ins.ReadSByte();
 
            this.time = ins.ReadDouble();
 
            this.velFrontcoorX = ins.ReadDouble();
 
            this.velFrontcoorY = ins.ReadDouble();
 
            this.velEndcoorX = ins.ReadDouble();
 
            this.velEndcoorY = ins.ReadDouble();
 
        }
 
        public exlcm.example_t Copy()
        {
            exlcm.example_t outobj = new exlcm.example_t();
            outobj.velID = this.velID;
 
            outobj.time = this.time;
 
            outobj.velFrontcoorX = this.velFrontcoorX;
 
            outobj.velFrontcoorY = this.velFrontcoorY;
 
            outobj.velEndcoorX = this.velEndcoorX;
 
            outobj.velEndcoorY = this.velEndcoorY;
 
            return outobj;
        }
    }
}

